// approch 1 marking negative for visited numbers

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        for(int i =0; i < nums.size(); i++){
            int dup = nums[i];
            if(dup < 0){
                dup *= -1;
            }
            if(nums[dup] < 0){
                return dup;
            }
            nums[dup] *= -1;
        }
        return 0;
    }
};


// Floyd cycle detection algo

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        if(nums.size() == 0) return 0;

        int slow = nums[0];
        int fast = nums[0];

        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow != fast);

        fast = nums[0];

        while(fast != slow){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;

    }
};
