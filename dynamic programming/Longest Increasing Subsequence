class Solution {
    int findLis(vector<int> &nums, int i, int prev, vector<vector<int>> &dp){
        if(i == nums.size()) return 0;

        if(dp[i][prev+1]  != -1) return dp[i][prev+1];

        int pick = 0;
        if(prev == -1 || nums[prev] < nums[i]){
            pick = findLis(nums, i+1, i, dp) + 1;
        }
        int notpick = findLis(nums,i+1,prev, dp);

        return dp[i][prev+1] = max(pick, notpick);
    }


public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int>(n+2, 0));

        for(int i = n-1; i >= 0; i--){
            for(int j = -1; j < i; j++){
                int notpick = dp[i+1][j+1];
                int pick = 0;
                if(j == -1 || nums[j] < nums[i]){
                    pick = dp[i+1][i+1]+1;
                }
                dp[i][j+1] = max(pick, notpick);
            }
        }

        return dp[0][0];
    }
};
