class NumMatrix {

    vector<vector<int>> mat;
    int n,m;

public:
    NumMatrix(vector<vector<int>>& matrix) {
        n = matrix.size();
        m = matrix[0].size();
        mat.resize(n,vector<int>(m, 0));
        int sum = 0;

        for(int i = 0; i < m; i++){
            mat[0][i] = matrix[0][i] + sum;
            sum = mat[0][i];
        }

        sum = 0;
        for(int i = 0; i < n; i++){
            mat[i][0] = matrix[i][0] + sum;
            sum = mat[i][0];
        }

        for(int i =1; i < n; i++){
            for(int j = 1; j < m; j++){
                mat[i][j] = mat[i][j-1] + (mat[i-1][j]-mat[i-1][j-1]) + matrix[i][j];
            }
        }

    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        // for(int i =0; i < n; i++){
        //     for(int j = 0; j < m; j++){
        //         cout << mat[i][j] << " ";
        //     }
        //     cout << endl;
        // }

        int a = 0;
        int b = 0;

        if(col1-1 >= 0){
            a = mat[row2][col1-1];
        }

        if(row1-1 >= 0){
            int c = 0;
            if(col1-1 >= 0){
                c = mat[row1-1][col1-1];
            }
            b = mat[row1-1][col2] - c;
        }

        return mat[row2][col2]-(a+b);
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
