class Solution {

    int coin(vector<int>& coins, int ind, int amount, vector<vector<int>> &dp){
        if(ind == coins.size()) return INT_MAX;

        if(amount == 0) return 0;

        if(dp[ind][amount] != -1) return dp[ind][amount];

        int notpick = coin(coins, ind+1,amount,dp);
        int pick = INT_MAX;

        if(amount-coins[ind] >= 0){
            int a = coin(coins,ind,amount-coins[ind],dp);
            int b = coin(coins,ind+1,amount-coins[ind],dp);

            if(a == INT_MAX && b == INT_MAX){
                pick = INT_MAX;
            }else if(a == INT_MAX){
                pick = b+1;
            }else if(b == INT_MAX){
                pick = a+1;
            }else{
                pick = min(a+1,b+1);
            }

            
        }

        return dp[ind][amount] = min(pick,notpick);
    }


public:
    int coinChange(vector<int>& coins, int amount) {
        vector<vector<int>> dp(coins.size()+1, vector<int>(amount+1, 0));
        int n = coins.size();

        for(int i = 1; i <= amount; i++){
            dp[n][i] = INT_MAX;
        }

        for(int i = n-1; i >= 0; i--){
            for(int j = 1; j <= amount; j++){
                int notpick=dp[i+1][j];
                int pick = INT_MAX;
                if(j-coins[i] >= 0){
                    int a = dp[i][j-coins[i]];
                    int b = dp[i+1][j-coins[i]];
                    if(a == INT_MAX && b == INT_MAX){
                        pick = INT_MAX;
                    }else if(a == INT_MAX){
                        pick = b+1;
                    }else if(b == INT_MAX){
                        pick = a+1;
                    }else{
                        pick = min(a+1,b+1);
                    }
                    
                }
                dp[i][j] = min(notpick, pick);
            }
        }
        
        if(dp[0][amount] == INT_MAX) return -1;
        return dp[0][amount];
    }
};
