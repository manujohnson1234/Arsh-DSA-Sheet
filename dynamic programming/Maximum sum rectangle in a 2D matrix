#include <bits/stdc++.h>
using namespace std;



void maxMatrixSum(vector<vector<int> > &v){
    int n = v.size();
    int m = v[0].size();
    vector<vector<int>> dp(n, vector<int>(m,0));
    
    int sum = 0;
    for(int i = 0; i < m; i++){
        dp[0][i] = v[0][i] + sum;
        sum = dp[0][i];
    }
    sum = 0;
    
    for(int i = 0; i < n; i++){
        dp[i][0] = v[i][0]+sum;
        sum = dp[i][0];
    }
    
    for(int i =1; i < n; i++){
        for(int j =1 ; j < m; j++){
            dp[i][j] = dp[i][j-1] + (dp[i-1][j]-dp[i-1][j-1]) + v[i][j];
        }
    }
    
    int ans = max(dp[0][m-1], dp[n-1][0]);
    
    for(int i = 1; i < n; i++){
        for(int j = 1; j < m; j++){
            for(int x = i; x >= 0; x--){
                for(int y = 0; y < m; y++){
                    int dx = 0, dy = 0;
                    
                    if(y-1 >= 0){
                        dy = dp[i][y-1];
                    }
                    
                    if(x-1 >= 0){
                        int dz = 0;
                        if(y-1 >= 0){
                            dz = dp[x-1][y-1];
                        }
                        dx = dp[x-1][j] - dz;
                    }
                    ans = max(ans, dp[i][j]-(dx+dy));
                }
            }
        }
    }
    
    cout << ans << endl;
}




int main() {
	// your code goes here
    
    vector<vector<int> > v = { { 1, 2, -1, -4, -20 },
                               { -8, -3, 4, 2, 1 },
                               { 3, 8, 10, 1, 3 },
                               { -4, -1, 1, 7, -6 } };
    maxMatrixSum(v);
    // cout << endl;
    // int sum = 0;
    
    // int n = v.size();
    // int m = v[0].size();
    
    // for(int i =0; i < n; i++){
    //     for(int j = 0; j < m; j++){
    //         sum += v[i][j];
    //     }
    // }
    // cout << sum;
}
// time compleity O(n^4)
